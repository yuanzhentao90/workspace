package com.atguigu.java8;

import java.util.Arrays;
import java.util.List;

import org.junit.Test;

/*
 * 1.创建流
 * 
 * 2.中间操作
 * 
 * 3.终止操作
 * 
 */
public class TestStreamAPI2 {

	List<Employee> employees = Arrays.asList(
			new Employee(20,"lily",5000),
			new Employee(30,"lucy",7000),
			new Employee(35,"jerry",8000),
			new Employee(40,"Tomy",9000),
			new Employee(38,"Jim",9500)
		);
	
	//中间操作
	/*
	 * 筛选与切片
	 * filter 接受lambda，从流中排除某些元素
	 * limit 截断流，使其元素不会超过指定的个数
	 * skip(n) 跳过元素，返回一个扔掉前n个元素的流，如果n>流中元素的个数，返回一个空流，和limit互补。
	 * distinct 通过流所生成元素是hashCode()方法和equals()方法去除重复元素
	 */
	
	@Test
	public void test() {
		/*
		 * 多个中间操作可以连接在一起形成一个流水线式操作，如果没有终止操作，则中间操作都不会执行。
		 * 中间操作只会在终止操作时一次性全部处理，称为“惰性求值”。
		 */
		employees.stream()
				 //中间操作
				 .filter( (e) -> {
					System.out.println("StreamAPI 在工作");
					return e.getAge()>35;
				  })
				 //终止操作
				 .forEach(System.out::println);
	}
	
	@Test
	public void test2() {
		employees.stream()
				 .limit(2)
				 .forEach(System.out::println);
	}
}
