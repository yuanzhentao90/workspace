package com.mashibing.juc.c_020;

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;

/*
 * ¶ÁËø£º¹²ÏíËø
 * Ğ´Ëø£ºÅÅËûËø
 */
public class T10_TestReadWriteLock {

	static Lock lock = new ReentrantLock();
	private static int value;
	
	static ReadWriteLock readWriteLock = new ReentrantReadWriteLock();
	static Lock readLock = readWriteLock.readLock();
	static Lock writeLock = readWriteLock.writeLock();
	
	public static void read(Lock lock) {
		try {
			lock.lock();
			Thread.sleep(1000);
			System.out.println("read over!");
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			lock.unlock();
		}
	}
	
	public static void write(Lock lock, int v) {
		try {
			lock.lock();
			Thread.sleep(1000);
			value = v;
			System.out.println("write over");
		} catch (InterruptedException e) {
			e.printStackTrace();
		}finally {
			lock.unlock();
		}
	}
}
